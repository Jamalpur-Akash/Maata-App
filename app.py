import streamlit as st
import pandas as pd
import uuid
import os
from datetime import datetime
import pytz
from pathlib import Path
from deep_translator import GoogleTranslator

st.set_page_config(page_title="‡∞Æ‡∞æ‡∞ü - ‡∞ï‡∞Æ‡±ç‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±Ä", page_icon="üå∏", layout="centered")

STORAGE_DIR = Path("storage/uploads")
USER_CSV = STORAGE_DIR / "users.csv"
POSTS_CSV = STORAGE_DIR / "posts.csv"
STORAGE_DIR.mkdir(parents=True, exist_ok=True)

if not USER_CSV.exists():
    pd.DataFrame(columns=["username", "password", "email", "about", "dob"]).to_csv(USER_CSV, index=False)
if not POSTS_CSV.exists():
    pd.DataFrame(columns=["post_id", "username", "timestamp", "caption", "media_path"]).to_csv(POSTS_CSV, index=False)

LANG_MAP = {"‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å": "te", "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä": "hi", "English": "en"}
if "lang" not in st.session_state:
    st.session_state.lang = "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å"

lang_choice = st.selectbox("üåê Language / ‡∞≠‡∞æ‡∞∑ / ‡§≠‡§æ‡§∑‡§æ", list(LANG_MAP.keys()), key="lang_choice")
st.session_state.lang = lang_choice

def t(te, hi, en):
    return {"‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å": te, "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä": hi, "English": en}[st.session_state.lang]

def translate_text(text):
    if st.session_state.lang == "English":
        return text
    try:
        return GoogleTranslator(source='auto', target=LANG_MAP[st.session_state.lang]).translate(text)
    except:
        return text

def load_csv(path):
    return pd.read_csv(path) if path.exists() else pd.DataFrame()

def save_post(username, caption, media_file):
    df = load_csv(POSTS_CSV)
    ts = datetime.now(pytz.timezone('Asia/Kolkata')).strftime("%Y-%m-%d %H:%M:%S %Z")
    media_path = ""
    if media_file:
        ext = Path(media_file.name).suffix
        media_filename = f"{uuid.uuid4().hex}{ext}"
        media_path = str(STORAGE_DIR / media_filename)
        with open(media_path, "wb") as f:
            f.write(media_file.getbuffer())
    df.loc[len(df)] = [str(uuid.uuid4()), username, ts, caption or "", media_path]
    df.to_csv(POSTS_CSV, index=False)

def delete_post(post_id):
    df = load_csv(POSTS_CSV)
    df = df[df["post_id"] != post_id]
    df.to_csv(POSTS_CSV, index=False)

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "username" not in st.session_state:
    st.session_state.username = ""

def login_signup():
    st.header(t("‡∞Æ‡∞æ‡∞ü ‡∞ï‡∞Æ‡±ç‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±Ä", "‡§Æ‡§æ‡§ü‡§æ ‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä", "Maata Community"))
    choice = st.radio("", [t("‡∞™‡±à‡∞®", "‡§ä‡§™‡§∞", "Login"), t("‡∞∏‡±à‡∞®‡±ç ‡∞Ö‡∞™‡±ç", "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞", "Sign up")])
    df_users = load_csv(USER_CSV)

    if choice == t("‡∞™‡±à‡∞®", "‡§ä‡§™‡§∞", "Login"):
        u = st.text_input(t("‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å", "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ", "Username"))
        p = st.text_input(t("‡∞™‡∞æ‡∞∏‡±ç‡∞µ‡∞∞‡±ç‡∞°‡±ç", "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°", "Password"), type="password")
        if st.button(t("‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç", "‡§≤‡•â‡§ó ‡§á‡§®", "Login")):
            if not df_users[(df_users.username == u) & (df_users.password == p)].empty:
                st.session_state.logged_in = True
                st.session_state.username = u
                st.rerun()
            else:
                st.error(t("‡∞§‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡±Ä‡∞ï‡∞∞‡∞£", "‡§ó‡§≤‡§§ ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§Ç‡§∂‡§ø‡§Ø‡§≤", "Incorrect credentials"))
    else:
        u = st.text_input(t("‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å", "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ", "Username"), key="su_user")
        e = st.text_input("Email")
        p = st.text_input(t("‡∞™‡∞æ‡∞∏‡±ç‡∞µ‡∞∞‡±ç‡∞°‡±ç", "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°", "Password"), type="password", key="su_pass")
        pc = st.text_input(t("‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡±Å ‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç", "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§™‡•Å‡§®‡§É ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç", "Confirm Password"), type="password")
        if st.button(t("‡∞∏‡±à‡∞®‡±ç ‡∞Ö‡∞™‡±ç", "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞", "Sign up")):
            if u in df_users.username.values:
                st.warning(t("‡∞Æ‡±Ä‡∞∞‡±Å ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞Ö‡∞Ø‡±ç‡∞Ø‡∞æ‡∞∞‡±Å", "‡§Ü‡§™ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞‡•ç‡§° ‡§π‡•à‡§Ç", "You are already registered"))
            elif p != pc:
                st.error(t("‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç‚Äå‡∞≤‡±Å ‡∞∏‡∞∞‡∞ø‡∞™‡±ã‡∞≤‡±á‡∞¶‡±Å", "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§Æ‡•á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ñ‡§æ‡§§‡•á", "Passwords do not match"))
            else:
                new = {"username": u, "password": p, "email": e, "about": "", "dob": ""}
                df_users.loc[len(df_users)] = new
                df_users.to_csv(USER_CSV, index=False)
                st.success(t("‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç!", "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§∏‡§´‡§≤!", "Registration successful!"))

if not st.session_state.logged_in:
    login_signup()
else:
    st.sidebar.title(f"{t('‡∞π‡∞≤‡±ã', '‡§®‡§Æ‡§∏‡•ç‡§§‡•á', 'Hello')}, {st.session_state.username}")
    nav = st.sidebar.radio(t("‡∞®‡∞æ‡∞µ‡∞ø‡∞ó‡±á‡∞∑‡∞®‡±ç", "‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§®", "Navigation"), [
        t("‡∞π‡±ã‡∞Æ‡±ç", "‡§π‡•ã‡§Æ", "Home"),
        t("‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç", "‡§®‡§à ‡§™‡•ã‡§∏‡•ç‡§ü", "New Post"),
        t("‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç", "‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤", "Profile"),
        t("‡∞≤‡∞æ‡∞ó‡±ç ‡∞Ö‡∞µ‡±Å‡∞ü‡±ç", "‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü", "Logout")
    ])

    if nav == t("‡∞≤‡∞æ‡∞ó‡±ç ‡∞Ö‡∞µ‡±Å‡∞ü‡±ç", "‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü", "Logout"):
        st.session_state.logged_in = False
        st.session_state.username = ""
        st.rerun()

    elif nav == t("‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç", "‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤", "Profile"):
        st.header(t("‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç", "‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤", "Profile"))
        u = st.session_state.username
        df = load_csv(USER_CSV)
        row = df[df.username == u].iloc[0]
        st.image("https://cdn-icons-png.flaticon.com/512/847/847969.png", width=100)
        st.write(f"**{t('‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å', '‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ', 'Username')}:** {row.username}")
        st.write(f"**Email:** {row.email}")
        st.write(f"**{t('‡∞®‡∞æ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø', '‡§Æ‡•á‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç', 'About')}:** {translate_text(row.about or t('‡∞≤‡∞≠‡∞ø‡∞Ç‡∞ö‡∞≤‡±á‡∞¶‡±Å', '‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç', 'Not available'))}")
        st.write(f"**{t('‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä', '‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø', 'Date of Birth')}:** {row.dob or t('‡∞≤‡∞≠‡∞ø‡∞Ç‡∞ö‡∞≤‡±á‡∞¶‡±Å', '‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç', 'Not available')}")
        about = st.text_area(t("‡∞®‡∞æ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø", "‡§Æ‡•á‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç", "About"), row.about)
        dob = st.text_input(t("‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä", "‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø", "Date of Birth"), value=row.dob)
        if st.button(t("‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞¶‡±ç‡∞¶‡∞æ‡∞Ç", "‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç", "Save")):
            df.loc[df.username == u, "about"] = about
            df.loc[df.username == u, "dob"] = dob
            df.to_csv(USER_CSV, index=False)
            st.success(t("‡∞®‡∞µ‡±Ä‡∞ï‡∞∞‡∞£ ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø!", "‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ!", "Updated!"))

    elif nav == t("‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç", "‡§®‡§à ‡§™‡•ã‡§∏‡•ç‡§ü", "New Post"):
        st.header(t("‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç", "‡§®‡§à ‡§™‡•ã‡§∏‡•ç‡§ü", "New Post"))
        caption = st.text_area(t("‡∞à ‡∞∞‡±ã‡∞ú‡±Å ‡∞è‡∞Æ‡±à‡∞Ç‡∞¶‡∞ø ‡∞Æ‡±Ä‡∞ï‡±Ü‡∞Ç‡∞§‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞Ç‡∞°‡∞ø...", "‡§Ü‡§ú ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç...", "Share what's happening..."), key="post_text")
        media = st.file_uploader(t("‡∞Æ‡±Ä‡∞°‡∞ø‡∞Ø‡∞æ ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", "‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç", "Add Media"), type=["png", "jpg", "jpeg", "mp4"])
        if st.button(t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç", "‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç", "Post")):
            save_post(st.session_state.username, caption, media)
            st.success(t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞™‡∞Ç‡∞™‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø", "‡§™‡•ã‡§∏‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡•Ä ‡§ó‡§à", "Post successfully shared"))
            st.rerun()

    else:
        st.header("üì¢ " + t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±Å‡∞≤‡±Å", "‡§™‡•ã‡§∏‡•ç‡§ü‡•ç‡§∏", "Posts"))
        dfp = load_csv(POSTS_CSV).sort_values(by="timestamp", ascending=False)
        for _, r in dfp.iterrows():
            uname = r.get("username", "")
            cap = r.get("caption", "")
            ts = r.get("timestamp", "")
            media_path = r.get("media_path", "")
            st.markdown(f"**@{uname}** _{ts}_")
            st.write(translate_text(cap))
            if media_path and Path(media_path).exists():
                st.image(media_path, use_container_width=True)
            if uname == st.session_state.username:
                if st.button(t("‡∞§‡±ä‡∞≤‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", "‡§π‡§ü‡§æ‡§è‡§Ç", "Delete"), key=r["post_id"]):
                    delete_post(r["post_id"])
                    st.success(t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞§‡±ä‡∞≤‡∞ó‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø", "‡§™‡•ã‡§∏‡•ç‡§ü ‡§π‡§ü‡§æ‡§Ø‡•Ä ‡§ó‡§à", "Post deleted"))
                    st.rerun()
            st.markdown("---")
        
