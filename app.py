import streamlit as st
import pandas as pd
import os
import time
import uuid
from datetime import datetime
import pytz
from pathlib import Path

st.set_page_config(page_title="‡∞Æ‡∞æ‡∞ü - ‡∞ï‡∞Æ‡±ç‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±Ä", page_icon="üëã", layout="centered")

STORAGE_DIR = Path("storage/uploads")
USERS_FILE = Path("storage/users.csv")
POSTS_FILE = Path("storage/posts.csv")

STORAGE_DIR.mkdir(parents=True, exist_ok=True)
for file in [USERS_FILE, POSTS_FILE]:
    if not file.exists():
        file.write_text("username,email,password,about,dob,profile_pic\n" if "users" in file.name else "username,text,image_path,timestamp\n")

LANGUAGES = {"‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å": "te", "‡§π‡§ø‡§Ç‡§¶‡•Ä": "hi", "English": "en"}
if "lang" not in st.session_state:
    st.session_state.lang = "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å"

def t(te, hi, en):
    return {"‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å": te, "‡§π‡§ø‡§Ç‡§¶‡•Ä": hi, "English": en}[st.session_state.lang]

st.markdown("### üî§ " + t("‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø", "‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç", "Switch Language"))
st.selectbox("", list(LANGUAGES.keys()), index=list(LANGUAGES.keys()).index(st.session_state.lang), key="lang")

def load_users():
    return pd.read_csv(USERS_FILE)

def load_posts():
    return pd.read_csv(POSTS_FILE)

def save_user(userdata):
    df = load_users()
    if userdata['username'] in df['username'].values:
        return False
    df = pd.concat([df, pd.DataFrame([userdata])], ignore_index=True)
    df.to_csv(USERS_FILE, index=False)
    return True

def save_post(username, text, image_path):
    df = load_posts()
    ist_time = datetime.now(pytz.timezone('Asia/Kolkata')).strftime("%Y-%m-%d %H:%M:%S %Z")
    df = pd.concat([df, pd.DataFrame([{
        "username": username,
        "text": text,
        "image_path": image_path if image_path else "",
        "timestamp": ist_time
    }])], ignore_index=True)
    df.to_csv(POSTS_FILE, index=False)

def delete_post(index):
    df = load_posts()
    df = df.drop(index).reset_index(drop=True)
    df.to_csv(POSTS_FILE, index=False)

if "user" not in st.session_state:
    st.session_state.user = None

menu = st.sidebar.radio(t("‡∞®‡∞æ‡∞µ‡∞ø‡∞ó‡±á‡∞∑‡∞®‡±ç", "‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§®", "Navigation"),
    (t("‡∞π‡±ã‡∞Æ‡±ç", "‡§π‡•ã‡§Æ", "Home"),
     t("‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç", "‡§®‡§à ‡§™‡•ã‡§∏‡•ç‡§ü", "New Post"),
     t("‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç", "‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤", "Profile"),
     t("‡∞≤‡∞æ‡∞ó‡±ç ‡∞Ö‡∞µ‡±Å‡∞ü‡±ç", "‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü", "Logout")))

if st.session_state.user:
    st.sidebar.markdown(f"üëã **{st.session_state.user}**")

if not st.session_state.user:
    st.title(t("‡∞Æ‡∞æ‡∞ü - ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞ï‡∞Æ‡±ç‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±Ä", "‡§Æ‡§æ‡§ü‡§æ - ‡§§‡•á‡§≤‡•Å‡§ó‡•Å ‡§ï‡§Æ‡•ç‡§Ø‡•Å‡§®‡§ø‡§ü‡•Ä", "Maata - Telugu Community"))

    tab1, tab2 = st.tabs([t("‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç", "‡§≤‡•â‡§ó ‡§á‡§®", "Login"), t("‡∞®‡∞Æ‡±ã‡∞¶‡±Å", "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞", "Register")])

    with tab1:
        uname = st.text_input(t("‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å", "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ", "Username"))
        pwd = st.text_input(t("‡∞™‡∞æ‡∞∏‡±ç‡∞µ‡∞∞‡±ç‡∞°‡±ç", "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°", "Password"), type="password")
        if st.button(t("‡∞™‡±ç‡∞∞‡∞µ‡±á‡∞∂‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", "‡§≤‡•â‡§ó ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç", "Login")):
            df = load_users()
            if uname in df['username'].values and df[df['username']==uname]['password'].iloc[0] == pwd:
                st.session_state.user = uname
                st.experimental_rerun()
            else:
                st.error(t("‡∞§‡∞™‡±ç‡∞™‡±Å ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç", "‡§ó‡§≤‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä", "Incorrect credentials"))

    with tab2:
        uname = st.text_input(t("‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å", "‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§®‡§æ‡§Æ", "Username"), key="r_user")
        email = st.text_input("Email")
        pwd = st.text_input(t("‡∞™‡∞æ‡∞∏‡±ç‡∞µ‡∞∞‡±ç‡∞°‡±ç", "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°", "Password"), type="password", key="r_pass")
        if st.button(t("‡∞®‡∞Æ‡±ã‡∞¶‡±Å", "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞", "Register")):
            df = load_users()
            if uname in df['username'].values:
                st.warning(t("‡∞Æ‡±Ä‡∞∞‡±Å ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å", "‡§Ü‡§™ ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§™‡§Ç‡§ú‡•Ä‡§ï‡•É‡§§ ‡§π‡•à‡§Ç", "You are already registered"))
            else:
                save_user({"username": uname, "email": email, "password": pwd, "about": "", "dob": "", "profile_pic": ""})
                st.success(t("‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø", "‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§∏‡§´‡§≤", "Registration successful"))

elif menu == t("‡∞≤‡∞æ‡∞ó‡±ç ‡∞Ö‡∞µ‡±Å‡∞ü‡±ç", "‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü", "Logout"):
    st.session_state.user = None
    st.experimental_rerun()

elif menu == t("‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç", "‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤", "Profile"):
    df = load_users()
    user_data = df[df['username'] == st.session_state.user].iloc[0]
    st.header(t("‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç", "‡§™‡•ç‡§∞‡•ã‡§´‡§º‡§æ‡§á‡§≤ ‡§µ‡§ø‡§µ‡§∞‡§£", "Profile Details"))
    st.image("https://cdn-icons-png.flaticon.com/512/149/149071.png", width=100)
    about = st.text_area(t("‡∞Æ‡±Ä ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø", "‡§Ü‡§™‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç", "About"), user_data['about'])
    dob = st.date_input(t("‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä", "‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø", "Date of Birth"), pd.to_datetime(user_data['dob']) if user_data['dob'] else None)
    if st.button(t("‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø", "‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç", "Save")):
        df.loc[df['username'] == st.session_state.user, 'about'] = about
        df.loc[df['username'] == st.session_state.user, 'dob'] = dob.strftime("%Y-%m-%d")
        df.to_csv(USERS_FILE, index=False)
        st.success(t("‡∞∏‡±á‡∞µ‡±ç ‡∞Ö‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø", "‡§∏‡•á‡§µ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ", "Saved"))

elif menu == t("‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç", "‡§®‡§à ‡§™‡•ã‡§∏‡•ç‡§ü", "New Post"):
    st.header(t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", "‡§™‡•ã‡§∏‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç", "Create Post"))
    txt = st.text_area(t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç", "‡§™‡•ã‡§∏‡•ç‡§ü ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü", "Post Text"))
    img = st.file_uploader(t("‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø", "‡§õ‡§µ‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç", "Choose Image"), type=["png", "jpg", "jpeg"])
    if st.button(t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø", "‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç", "Post")):
        image_path = ""
        if img:
            filename = f"{uuid.uuid4().hex}_{img.name}"
            image_path = str(STORAGE_DIR / filename)
            with open(image_path, "wb") as f:
                f.write(img.read())
        save_post(st.session_state.user, txt, image_path)
        st.success(t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç", "‡§™‡•ã‡§∏‡•ç‡§ü ‡§∏‡§´‡§≤", "Post successful"))

else:
    st.header("üì¢ " + t("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±Å‡∞≤‡±Å", "‡§™‡•ã‡§∏‡•ç‡§ü‡•ç‡§∏", "Posts"))
    posts = load_posts()
    for i, row in posts[::-1].iterrows():
        st.markdown(f"**@{row['username']}** ({row['timestamp']})")
        st.write(row['text'])
        if row['image_path']:
            st.image(row['image_path'], use_column_width=True)
        if row['username'] == st.session_state.user:
            if st.button(t("‡∞§‡±ä‡∞≤‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", "‡§π‡§ü‡§æ‡§è‡§Ç", "Delete"), key=f"del_{i}"):
                delete_post(i)
                st.experimental_rerun()
