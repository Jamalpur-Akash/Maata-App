import streamlit as st
import pandas as pd
import os
import time
import uuid
from pathlib import Path

st.set_page_config(page_title="‡∞Æ‡∞æ‡∞ü - ‡∞ï‡∞Æ‡±ç‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±Ä", page_icon="üå∏", layout="centered")

STORAGE_DIR = Path("storage/uploads")
USER_CSV = STORAGE_DIR / "users.csv"
POSTS_CSV = STORAGE_DIR / "posts.csv"
INTERACTIONS_CSV = STORAGE_DIR / "interactions.csv"
STORAGE_DIR.mkdir(parents=True, exist_ok=True)

if not USER_CSV.exists():
    pd.DataFrame(columns=["username", "password", "email", "about", "dob"]).to_csv(USER_CSV, index=False)
else:
    df = pd.read_csv(USER_CSV)
    if 'about' not in df.columns:
        df['about'] = ''
    if 'dob' not in df.columns:
        df['dob'] = ''
    if 'email' not in df.columns:
        df['email'] = ''
    df.to_csv(USER_CSV, index=False)

if not POSTS_CSV.exists():
    pd.DataFrame(columns=["post_id", "username", "timestamp", "caption", "media_path"]).to_csv(POSTS_CSV, index=False)

if not INTERACTIONS_CSV.exists():
    pd.DataFrame(columns=["interaction_id", "post_id", "username", "type", "content", "timestamp"]).to_csv(INTERACTIONS_CSV, index=False)

def save_post(username, caption, media_file=None):
    post_id = str(uuid.uuid4())
    media_path = ""
    if media_file:
        ext = Path(media_file.name).suffix
        media_filename = f"{post_id}{ext}"
        media_path = str(STORAGE_DIR / media_filename)
        with open(media_path, "wb") as f:
            f.write(media_file.getbuffer())
    timestamp = pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")
    pd.DataFrame([{
        "post_id": post_id,
        "username": username,
        "timestamp": timestamp,
        "caption": caption,
        "media_path": media_path
    }]).to_csv(POSTS_CSV, mode='a', header=False, index=False)

def delete_post(post_id):
    posts_df = pd.read_csv(POSTS_CSV)
    posts_df = posts_df[posts_df["post_id"] != post_id]
    posts_df.to_csv(POSTS_CSV, index=False)
    interactions_df = pd.read_csv(INTERACTIONS_CSV)
    interactions_df = interactions_df[interactions_df["post_id"] != post_id]
    interactions_df.to_csv(INTERACTIONS_CSV, index=False)

def record_interaction(post_id, username, interaction_type, content=""):
    interaction_id = str(uuid.uuid4())
    timestamp = pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")
    pd.DataFrame([{
        "interaction_id": interaction_id,
        "post_id": post_id,
        "username": username,
        "type": interaction_type,
        "content": content,
        "timestamp": timestamp
    }]).to_csv(INTERACTIONS_CSV, mode='a', header=False, index=False)

def remove_interaction(interaction_id):
    df = pd.read_csv(INTERACTIONS_CSV)
    df = df[df['interaction_id'] != interaction_id]
    df.to_csv(INTERACTIONS_CSV, index=False)

def get_post_interactions(post_id):
    if not INTERACTIONS_CSV.exists() or INTERACTIONS_CSV.stat().st_size == 0:
        return {'likes_count': 0, 'comments_df': pd.DataFrame(), 'user_like_id': None}
    df = pd.read_csv(INTERACTIONS_CSV)
    df_post = df[df['post_id'] == post_id]
    likes = df_post[df_post['type'] == 'like']
    comments = df_post[df_post['type'] == 'comment'].sort_values(by="timestamp")
    user_like_id = None
    if st.session_state.get("logged_in"):
        user_like = likes[likes["username"] == st.session_state.username]
        if not user_like.empty:
            user_like_id = user_like.iloc[0]['interaction_id']
    return {'likes_count': likes.shape[0], 'comments_df': comments, 'user_like_id': user_like_id}

def display_posts():
    st.subheader("üì¢ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç‚Äå‡∞≤‡±Å")
    if not POSTS_CSV.exists() or POSTS_CSV.stat().st_size == 0:
        st.info("‡∞á‡∞Ç‡∞ï‡∞æ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç‚Äå‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å!")
        return
    df = pd.read_csv(POSTS_CSV).sort_values(by="timestamp", ascending=False)
    for _, row in df.iterrows():
        st.markdown(f"**@{row['username']}** _{row['timestamp']}_")
        st.write(row['caption'])
        if row['media_path'] and os.path.exists(row['media_path']):
            ext = Path(row['media_path']).suffix.lower()
            if ext in [".png", ".jpg", ".jpeg", ".gif"]:
                st.image(row['media_path'], use_container_width=True)
            elif ext in [".mp4", ".mov", ".avi", ".webm"]:
                st.video(row['media_path'])

        interactions = get_post_interactions(row['post_id'])
        col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
        with col1:
            if interactions['user_like_id']:
                if st.button(f"‚ù§Ô∏è ({interactions['likes_count']})", key=row['post_id'] + "_unlike"):
                    remove_interaction(interactions['user_like_id'])
                    st.rerun()
            else:
                if st.button(f"üëç ({interactions['likes_count']})", key=row['post_id'] + "_like"):
                    record_interaction(row['post_id'], st.session_state.username, "like")
                    st.rerun()
        with col2:
            st.write(f"üí¨ {interactions['comments_df'].shape[0]}")
        with col3:
            st.button("üîó", key=row['post_id'] + "_share", disabled=True)
        with col4:
            if row['username'] == st.session_state.username:
                if st.button("üóëÔ∏è", key=row['post_id'] + "_delete"):
                    delete_post(row['post_id'])
                    st.rerun()

        with st.expander("‡∞µ‡±ç‡∞Ø‡∞æ‡∞ñ‡±ç‡∞Ø‡∞≤‡±Å"):
            for _, c in interactions['comments_df'].iterrows():
                st.markdown(f"**@{c['username']}** _{c['timestamp']}_")
                st.write(c['content'])
            comment = st.text_input("‡∞Æ‡±Ä ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ñ‡±ç‡∞Ø...", key=row['post_id'] + "_input")
            if st.button("‡∞µ‡±ç‡∞Ø‡∞æ‡∞ñ‡±ç‡∞Ø ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø", key=row['post_id'] + "_submit"):
                if comment.strip():
                    record_interaction(row['post_id'], st.session_state.username, "comment", comment)
                    st.rerun()
        st.markdown("---")

if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'username' not in st.session_state:
    st.session_state.username = ""
if 'auth_view' not in st.session_state:
    st.session_state.auth_view = "login"

def login_signup():
    st.title("‡∞Æ‡∞æ‡∞ü - ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞ï‡∞Æ‡±ç‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±Ä üå∏")
    st.markdown("‡∞Æ‡±Ä ‡∞≠‡∞æ‡∞µ‡∞æ‡∞≤‡∞®‡±Å ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞á‡∞§‡∞∞‡±Å‡∞≤‡∞§‡±ã ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞Ç ‡∞Ü‡∞µ‡∞ø‡∞∑‡±ç‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø!")
    option = st.radio("‡∞Æ‡±Ü‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø", ["‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç", "‡∞∏‡±à‡∞®‡±ç ‡∞Ö‡∞™‡±ç"])
    if option == "‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç":
        user = st.text_input("‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å")
        pwd = st.text_input("‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç", type="password")
        if st.button("‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç"):
            df = pd.read_csv(USER_CSV)
            if not df[(df.username == user) & (df.password == pwd)].empty:
                st.session_state.logged_in = True
                st.session_state.username = user
                st.rerun()
            else:
                st.error("‡∞§‡∞™‡±ç‡∞™‡±Å ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç.")
    else:
        user = st.text_input("‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å (‡∞ï‡±ä‡∞§‡±ç‡∞§)")
        email = st.text_input("‡∞à‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç")
        pwd = st.text_input("‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç", type="password")
        confirm = st.text_input("‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", type="password")
        if st.button("‡∞∏‡±à‡∞®‡±ç ‡∞Ö‡∞™‡±ç"):
            df = pd.read_csv(USER_CSV)
            if user in df.username.values:
                st.error("‡∞Æ‡±Ä‡∞∞‡±Å ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞∞‡∞ø‡∞ú‡∞ø‡∞∏‡±ç‡∞ü‡∞∞‡±ç ‡∞Ö‡∞Ø‡±ç‡∞Ø‡∞æ‡∞∞‡±Å.")
            elif pwd != confirm:
                st.error("‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç‚Äå‡∞≤‡±Å ‡∞∏‡∞∞‡∞ø‡∞™‡±ã‡∞≤‡∞≤‡±á‡∞¶‡±Å.")
            else:
                new = pd.DataFrame([{"username": user, "password": pwd, "email": email, "about": "", "dob": ""}])
                new.to_csv(USER_CSV, mode="a", header=False, index=False)
                st.success("‡∞∏‡±à‡∞®‡±ç ‡∞Ö‡∞™‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç! ‡∞≤‡∞æ‡∞ó‡∞ø‡∞®‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.")
                st.session_state.auth_view = "login"
                st.rerun()

if not st.session_state.logged_in:
    login_signup()
else:
    st.sidebar.markdown(f"üëã ‡∞π‡∞≤‡±ã, {st.session_state.username}")
    nav = st.sidebar.radio("‡∞®‡∞æ‡∞µ‡∞ø‡∞ó‡±á‡∞∑‡∞®‡±ç", ["üè† ‡∞π‡±ã‡∞Æ‡±ç", "‚ûï ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç", "üë§ ‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç", "üîí ‡∞≤‡∞æ‡∞ó‡±ç ‡∞Ö‡∞µ‡±Å‡∞ü‡±ç"])
    if nav == "üè† ‡∞π‡±ã‡∞Æ‡±ç":
        display_posts()
    elif nav == "‚ûï ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç":
        st.subheader("‡∞Æ‡±Ä ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")
        with st.form("new_post", clear_on_submit=True):
            caption = st.text_area("‡∞è‡∞Ç ‡∞ú‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø?")
            media = st.file_uploader("‡∞Æ‡±Ä‡∞°‡∞ø‡∞Ø‡∞æ ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", type=["png", "jpg", "jpeg", "gif", "mp4", "mov", "avi", "webm"])
            submit = st.form_submit_button("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")
            if submit:
                if not caption.strip() and not media:
                    st.error("‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç ‡∞∂‡±Ä‡∞∞‡±ç‡∞∑‡∞ø‡∞ï ‡∞≤‡±á‡∞¶‡∞æ ‡∞Æ‡±Ä‡∞°‡∞ø‡∞Ø‡∞æ ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç.")
                else:
                    save_post(st.session_state.username, caption, media)
                    st.success("‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞™‡∞Ç‡∞™‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!")
                    st.rerun()
    elif nav == "üë§ ‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç":
        df = pd.read_csv(USER_CSV)
        user_data = df[df.username == st.session_state.username].iloc[0]
        st.markdown("### ‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç")
        st.image("https://cdn-icons-png.flaticon.com/512/149/149071.png", width=100)
        st.write(f"**‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞™‡±á‡∞∞‡±Å:** {st.session_state.username}")
        st.write(f"**‡∞à‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç:** {user_data.email}")
        st.write(f"**‡∞®‡∞æ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø:** {user_data.about}")
        st.write(f"**‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä:** {user_data.dob}")
        with st.form("edit_profile"):
            new_about = st.text_area("‡∞®‡∞æ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø", value=user_data.about)
            new_dob = st.text_input("‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä (YYYY-MM-DD)", value=user_data.dob)
            submit = st.form_submit_button("‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")
            if submit:
                df.loc[df.username == st.session_state.username, "about"] = new_about
                df.loc[df.username == st.session_state.username, "dob"] = new_dob
                df.to_csv(USER_CSV, index=False)
                st.success("‡∞®‡∞µ‡±Ä‡∞ï‡∞∞‡∞£ ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡±à‡∞Ç‡∞¶‡∞ø!")
                st.rerun()
    elif nav == "üîí ‡∞≤‡∞æ‡∞ó‡±ç ‡∞Ö‡∞µ‡±Å‡∞ü‡±ç":
        st.session_state.logged_in = False
        st.session_state.username = ""
        st.rerun()
    
